"""
Django settings for dj_backend project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import mimetypes
from pathlib import Path
import datetime
import logging

import environ

try:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration
    from sentry_sdk.integrations.celery import CeleryIntegration

    SENTRY_SDK_INSTALLED = True
except ImportError:
    SENTRY_SDK_INSTALLED = False
    logging.warning("Environ have't install `sentry_sdk` package!......")

env = environ.Env()
APP_NAME = "fosun_circle"
IS_DOCKER = os.environ.get('DEPLOY') == 'DOCKER'
ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent.parent
PROJECT_DIR = APPS_DIR = ROOT_DIR / APP_NAME

sys.path.append(str(APPS_DIR))
sys.path.append(str(APPS_DIR / "apps"))


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
SETTINGS_DIR = os.path.join(BASE_DIR, 'config', '.dotenv')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="@vvtfc3&p@%e64bfq-m1y8ck!yjm$dp9yfqxz-0i-z+!ef0v=9",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", False)

ALLOWED_HOSTS = []


# APPS
# ------------------------------------------------------------------------------
# Application definition

# "django.contrib.auth" 会产生三张表,如果用上可以不管 [auth_group,auth_group_permissions,auth_permission]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    # 'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',

    # "static_precompiler",
    "compressor",

    # Third Package Apps
    "django_celery_results",
    "django_celery_beat",
    "rest_framework",
    'django_extensions',

    # 跨域
    "corsheaders",

    # 双因子认证
    'django_otp',
    'django_otp.plugins.otp_totp',

    # Health Check
    # "health_check",
    # "health_check.db",                          # stock Django health checkers
    # "health_check.cache",
    # "health_check.storage",
    # "health_check.contrib.celery",              # requires celery
    # "health_check.contrib.psutil",              # disk and memory utilization; requires psutil
    # "health_check.contrib.rabbitmq",            # requires RabbitMQ broker
    # 'health_check.contrib.redis',               # required Redis broker
    # 'health_check.contrib.s3boto3_storage',     # requires boto3 and S3BotoStorage backend

    # DB Connections Pool
    APP_NAME + ".contrib.db_pool",

    # Project Apps
    # 如果 fosun_circle.apps 作为应用的根目录, 可以是直接在 INSTALLED_APPS = ['users']

    # Error: RuntimeError: Model class fosun_circle.apps.users.model.XyzModel doesn't declare an explicit
    # app_label and isn't in an application in INSTALLED_APPS.
    # (1): 如果 Pycharm /fosun_circle/apps 被标记为 source root:
    #      直接用:  INSTALLED_APPS += ['users'] => from user.xxx.xxx import zzz
    # (2): 如果没有被标记为 source root:
    #      INSTALLED_APPS += ['fosun_circle.apps.users'] =>  from fosun_circle.apps.users.xxx.xxx import zzz

    # "fosun_circle.apps.ding_talk",
    "common",
    "aliyun",
    "ding_talk",
    "users",
    "questionnaire",
    "circle",
    "permissions",
    "api_gateway",
    "lottery",
    "esg",
]


# MIDDLEWARE
# ------------------------------------------------------------------------------
# Application Middleware

MIDDLEWARE = [
    # Cross Domain Middleware
    "corsheaders.middleware.CorsMiddleware",

    # Django Middleware
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # https://whitenoise.readthedocs.io/en/stable/index.html

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',      # 双因子认证
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # django.middleware.gzip.GZipMiddleware 已替代三方包: django-compression-middleware
    # 'compression_middleware.middleware.CompressionMiddleware'
    'django.middleware.gzip.GZipMiddleware',  # 压缩Django的HTTP响应

    # Project Util Middleware
    "{0}.middleware.auth_token.AuthTokenMiddleware".format(APP_NAME),
    "{0}.middleware.http_response.HttpResponseMiddleware".format(APP_NAME),
    "{0}.middleware.spaceless.SpacelessMiddleware".format(APP_NAME),

    # minify_html 对普通HTML没有问题，但是对Vue组件或子组件导致浏览无法正常渲染
    "{0}.contrib.minify_html.middleware.HtmlMinifyMiddleware".format(APP_NAME),
    "{0}.contrib.minify_html.middleware.MarkRequestMiddleware".format(APP_NAME),
]

# URLS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf

ROOT_URLCONF = 'config.urls'

# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application
WSGI_APPLICATION = 'config.wsgi.application'

# 自定义配置
# API_URL_PREFIX = "/v1/circle"
API_URL_PREFIX = ""


# TEMPLATES
# ------------------------------------------------------------------------------
# Django Templates

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 引擎应在目录中按搜索顺序查找模板源文件
        'DIRS': [
            str(PROJECT_DIR / "templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],

            'libraries': {  # Adding this section should work around the issue.
                'staticfiles': 'django.templatetags.static',
                'alone_tags': '{}.templatetags.alone_tags'.format(APP_NAME),
            },
        },
    },
]


# Database
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# Refer to dev and prod environ `DATABASES` configuration for details

# Master And Slave Router, But Admin could error
DATABASE_ROUTERS = ["config.db_router.DatabaseRouter"]
DATABASE_APPS_ROUTER_MAPPING = {
    app.split(".")[-1]: "default"
    for app in INSTALLED_APPS
    if app.split(".")[-1]
}


# PASSWORDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# https://docs.djangoproject.com/en/dev/ref/settings/#language-code

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'


# Local time zone. Choices are
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# though not all of them may be available with every OS.
# In Windows, this must be set to your system time zone.

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

DJANGO_CELERY_BEAT_TZ_AWARE = False

# STATIC
# ------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# https://docs.djangoproject.com/en/dev/ref/settings/#static-root
# 生产环境下Django对静态资源的处理
# python manage.py collectstatic  # 运行该命令，所有静态资源都将拷贝到STATIC_ROOT指定的目录中
# STATIC_ROOT = str(PROJECT_DIR / "static")   # 通过配置 nginx location 指定访问静态资源路径
# STATIC_ROOT = str(APPS_DIR / "static")

# whitenoise 当nginx/apache不可用时，建议使用；使用whitenoise时，可选django-compressor 二次压缩
# whitenoise 可不
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# Note that:
#    仅压缩, 文件少, collectstatic 命令稍快, 可配合Django-Compressor压缩
#   "whitenoise.storage.CompressedStaticFilesStorage"
#
#    压缩并缓存, 文件多， collectstatic 命令稍慢(产生额外哈希文件), 可配合Django-Compressor压缩
#   "whitenoise.storage.CompressedManifestStaticFilesStorage"
#
#   存储到ALIYUN OSS, 速度更快(文件太多上传OSS慢啊), 暂不能配合Django-Compressor压缩
#   "{APP_NAME}.contrib.storage.backends.aliyun.AliyunStaticStorage"
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# `AliyunStaticStorage` setting:
ALIYUN_OSS_ACCESS_KEY_ID = ''
ALIYUN_OSS_ACCESS_KEY_SECRET = ''
ALIYUN_OSS_END_POINT = 'oss-cn-shanghai.aliyuncs.com'
ALIYUN_OSS_BUCKET_NAME = 'exerlalnd'
ALIYUN_OSS_BUCKET_ACL_TYPE = 'public-read'
ALIYUN_OSS_CNAME = ''

# https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = API_URL_PREFIX + "/static/"

# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
# 开发环境下Django对静态资源的处理
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, APP_NAME, "staticfiles"),
]
logging.warning('STATIC_ROOT: %s, STATICFILES_DIRS: %s', STATIC_ROOT, STATICFILES_DIRS)

# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",

    # other finders [django-compressor]
    # "static_precompiler.finders.StaticPrecompilerFinder",
    "compressor.finders.CompressorFinder",
]

# Django-Compressor
# ------------------------------------------------------------------------------
# https://django-compressor.readthedocs.io/en/latest/
# https://python.freelycode.com/contribution/detail/1855
# https://www.saoniuhuo.com/question/detail-2688966.html
# Django-Compressor开启与否取决于DEBUG参数，默认是COMPRESS_ENABLED与DEBUG的值相反。
# 因为Django-Compressor的功能本身是用在生产环境下项目发布前对静态文件压缩处理的。
# 因此想在开发阶段(DEBUG=True)的时候做测试使用，需要手动设置COMPRESS_ENABLED=True
COMPRESS_OUTPUT_DIR = 'compress'
COMPRESS_STORAGE = "compressor.storage.GzipCompressorFileStorage"   # OK
COMPRESS_OFFLINE = True
COMPRESS_FILTERS = {
    'css': [
        # creates absolute urls from relative ones
        'compressor.filters.css_default.CssAbsoluteFilter',
        # css minimizer
        'compressor.filters.cssmin.CSSMinFilter',
    ],

    'js': [
        # `JSMinFilter`: both [yuglify] and [google-closure-compiler] better not use [jsmin]
        # 'compressor.filters.jsmin.JSMinFilter',

        # Use `yuglify` to compress, User Alone
        'compressor.filters.yuglify.YUglifyJSFilter',

        # Use Google `closure-compiler` to compress, User Alone
        # 'compressor.filters.closure.ClosureCompilerFilter',
    ]
}
COMPRESS_YUGLIFY_BINARY = "yuglify"  # OK. yuglify@v2.0.0

# [google-closure-compiler]: No verification is performed. Use caution
# COMPRESS_CLOSURE_COMPILER_BINARY = 'google-closure-compiler'  # google-closure-compiler:20230802.0.0

# COMPRESS_URL = ''
COMPRESS_PRECOMPILERS = [
    ('text/coffeescript', 'coffee --compile --stdio'),
    ('text/less', 'lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/stylus', 'stylus < {infile} > {outfile}'),
    ('text/x-scss', 'sass --scss {infile} {outfile}'),
]


# Minify-Html
# ------------------------------------------------------------------------------
# https://github.com/cobrateam/django-htmlmin
HTML_MINIFY = False
HTML_MIN_PARSER = 'html.parser'  # [html.parser, html5lib] -> 子组件的自组件无法正产展示
EXCLUDE_FROM_MINIFYING = ('^api/', )
KEEP_COMMENTS_ON_MINIFYING = False
CONSERVATIVE_WHITESPACE_ON_MINIFYING = True


# Django-Static-Precompiler
# ------------------------------------------------------------------------------
# Precompiler CoffeeScript, LiveScript, SASS / SCSS, LESS, Stylus, Babel and Handlebars
STATIC_PRECOMPILER_COMPILERS = (
    "static_precompiler.compilers.CoffeeScript",
    "static_precompiler.compilers.Babel",
    "static_precompiler.compilers.Handlebars",
    "static_precompiler.compilers.SASS",
    "static_precompiler.compilers.SCSS",
    "static_precompiler.compilers.LESS",
    "static_precompiler.compilers.Stylus",
)


# MEDIA
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
# BASE_MEDIA_PATH = '/tmp' if IS_DOCKER else '/data'
BASE_MEDIA_PATH = '/tmp'
MEDIA_ROOT = "/data/bms/"
MEDIA_URL = "/circle/media/"
TMP_ATTACHMENT_DIR = '%s/attachment/' % BASE_MEDIA_PATH


# Custom User Model
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#auth

AUTH_USER_MODEL = "users.CircleUsersModel"


# SECURITY
# ------------------------------------------------------------------------------
# Http Security

# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True

# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True

# https://docs.djangoproject.com/en/dev/ref/settings/#secure-browser-xss-filter
SECURE_BROWSER_XSS_FILTER = True

# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"


# Upload File
FILE_UPLOAD_MAX_MEMORY_SIZE = 26214400  # 上传文件大小，改成25M
DATA_UPLOAD_MAX_MEMORY_SIZE = 26214400  # 上传数据大小，也改成了25M


# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging

# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
BASE_LOG_DIR = "{1}/logs/{0}".format(APP_NAME, BASE_MEDIA_PATH)
for path in [BASE_LOG_DIR, MEDIA_ROOT, TMP_ATTACHMENT_DIR]:
    try:
        os.makedirs(path, exist_ok=True)
    except:
        import traceback
        logging.error(traceback.format_exc())

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,

    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] %(levelname)s %(message)s"
        }
    },

    "filters": {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },

        "file": {
            "level": 'INFO',
            "class": 'logging.handlers.RotatingFileHandler',
            "filename": os.path.join(BASE_LOG_DIR, "{0}.log".format(APP_NAME)),
            "formatter": 'verbose',
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 10,
            'encoding': 'utf-8',
          },

        "celery_task": {
            "level": 'INFO',
            "class": 'logging.handlers.RotatingFileHandler',
            "filename": os.path.join(BASE_LOG_DIR, "{0}_celery_task.log".format(APP_NAME)),
            "formatter": 'verbose',
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 10,
            'encoding': 'utf-8',
          },

        "celery_worker": {
            "level": 'INFO',
            "class": 'logging.handlers.RotatingFileHandler',
            "filename": os.path.join(BASE_LOG_DIR, "{0}_celery_worker.log".format(APP_NAME)),
            "formatter": 'verbose',
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 10,
            'encoding': 'utf-8',
          },

        "celery_beat": {
            "level": 'INFO',
            "class": 'logging.handlers.RotatingFileHandler',
            "filename": os.path.join(BASE_LOG_DIR, "{0}_celery_beat.log".format(APP_NAME)),
            "formatter": 'verbose',
            'maxBytes': 1024 * 1024 * 100,
            'backupCount': 10,
            'encoding': 'utf-8',
          },
    },

    "root": {"level": "INFO", "handlers": ["console"]},

    "loggers": {
        "django": {
            "level": "INFO",
            "handlers": ["file"],
            "propagate": True,
        },

        "django.db.backends": {
            "level": "INFO",
            "handlers": ["file"],
            "propagate": False,
        },

        # Errors logged by the SDK itself
        "sentry_sdk": {
            "level": "INFO",
            "handlers": ["file"],
            "propagate": False
        },

        "celery.task": {
            "level": "INFO",
            "handlers": ["celery_task"],
            "propagate": False
        },

        "celery.worker": {
            "level": "INFO",
            "handlers": ["celery_worker"],
            "propagate": False
        },

        "celery.beat": {
            "level": "INFO",
            "handlers": ["celery_beat"],
            "propagate": False
        },

        "django.security.DisallowedHost": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

# django-rest-framework
# -------------------------------------------------------------------------------
# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        APP_NAME + ".contrib.drf.authentication.JwtTokenAuthentication",
        # "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        # "rest_framework.authentication.TokenAuthentication",
    ),

    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.AllowAny",
        # "{0}.contrib.drf.permissions.IsOwnerOrReadOnly".format(APP_NAME),

        # Use Django's standard `django.contrib.auth` permissions,
        # or allow read-only access for unauthenticated users.
        # "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ),

    "DEFAULT_RENDERER_CLASSES":
        (
            "rest_framework.renderers.JSONRenderer",
        ),

    # EXCEPTION_HANDLER
    "EXCEPTION_HANDLER": APP_NAME + ".contrib.drf.exceptions.exception_handler",

    # list api result to pagination
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_PAGINATION_CLASS": APP_NAME + ".contrib.drf.pagination.Pagination",

    # 限速
    'DEFAULT_THROTTLE_CLASSES': (
        '%s.contrib.drf.throttling.AnonRateThrottle' % APP_NAME,  # 匿名限速
        '%s.contrib.drf.throttling.UserRateThrottle' % APP_NAME,  # 登录限速
    ),

    'DEFAULT_THROTTLE_RATES': {
        'anon': '50/m',
        'user': '300/m',
    }
}

JWT_AUTH = {
    "JWT_PASSWORD_FIELD": "sms_code",
    "JWT_AUTH_COOKIE": "Auth-Jwt",
    "JWT_AUTH_HEADER_PREFIX": "Auth-Jwt",
    "JWT_EXPIRATION_DELTA": datetime.timedelta(hours=1.5),
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(hours=1.5),
}

JWT_FAIL_IGNORE = True      # 自定义配置 fosun_circle.contrib.drf.authentication:JwtTokenAuthentication.authenticate


# CACHES
# ------------------------------------------------------------------------------
# Refer to dev and prod environ `CACHES` configuration for details
UNIVERSAL_SMS_CODE = "000000"


# # Celery
# # ------------------------------------------------------------------------------
# # https://docs.celeryproject.org/en/latest/userguide/configuration.html
#
# if USE_TZ:
#     # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-timezone
#     CELERY_TIMEZONE = TIME_ZONE
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_url
# CELERY_BROKER_URL = env("CELERY_BROKER_URL", default=None)
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_backend
# CELERY_RESULT_BACKEND = CELERY_BROKER_URL
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-accept_content
# CELERY_ACCEPT_CONTENT = ["json"]
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_serializer
# CELERY_TASK_SERIALIZER = "json"
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_serializer
# CELERY_RESULT_SERIALIZER = "json"
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-time-limit
# # TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_TIME_LIMIT = 5 * 60
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-soft-time-limit
# # TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_SOFT_TIME_LIMIT = 60
#
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#beat-scheduler
# CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


DEFAULT_AVATAR_URL = 'https://exerland-bbs.oss-cn-shanghai.aliyuncs.com/user/0%s.png'

# CROS
# ------------------------------------------------------------------------------
# Cross Domain Origin

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = []
CORS_ALLOW_METHODS = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT",]
CORS_ALLOW_HEADERS = ["*"]
# CORS_ALLOW_HEADERS = (
#     'XMLHttpRequest',
#     'X_FILENAME',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
#     'Pragma',
#     'Cookie',
#     'questionnaireId',
#     'from',
#     'X-Auth',
# )


# Mail Setting
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# EMAIL_USE_SSL = False                            # SSL加密方式
# EMAIL_HOST = 'mail.fosun.com'                   # 发送邮件的邮箱 的 SMTP服务器
# EMAIL_PORT = 25                                 # SMTP服务器端口
# EMAIL_HOST_USER = '@.com'              # 发件人
# EMAIL_HOST_PASSWORD = ''                # 密码(这里使用的是授权码)
# EMAIL_FROM = '.com'    # 邮件显示的发件人
# EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# WebSocket
# ------------------------------------------------------------------------------
# Async Deploy to websocket

ASGI_APPLICATION = "config.wsgi.application"
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": ["redis://:123456@127.0.0.1:6399/12"],  # 需修改(未启用)
            # "symmetric_encryption_keys": [SECRET_KEY],
        },
    },
}

# 双因子认证(2FA)
# ------------------------------------------------------------------------------
# https://django-otp-official.readthedocs.io/en/latest/
# https://github.com/google/google-authenticator/wiki/Key-Uri-Format
OTP_TOTP_ISSUER = "CircleServer"


CELERY_APP = 'config.celery:celery_app'
CELERY_WEBAPP = False

DD_CUSTOM_ROBOT_WEBHOOK_URL = 'https://oapi.dingtalk.com/robot/send'
DD_CUSTOM_ROBOT_WEBHOOK_ACCESS_TOKEN = 'd296eccdc87a88c09c01580528b019fd1e7b91d6f3efb5fddfc72464478bede5'
DD_CUSTOM_ROBOT_WEBHOOK_SECRET = 'SECef589307c8474cb26dd4956619376d91faddea80551780eed858bd32c67916b3'

# 服务调用
CIRCLE_SERVICE_HOST = 'http://bms:8000'
CIRCLE_MONITOR_API = 'api/v1/circle/monitor/robot/send'
CIRCLE_ERROR_PAGE_URL = 'circle/monitor/devops/notification'

from config.conf.awesome_ui import *

# Refused to apply style from '<URL>' because its MIME type ('application/json') is not a supported stylesheet MIME
# type, and strict MIME checking is enabled.
SECURE_CONTENT_TYPE_NOSNIFF = False

mimetypes.add_type("text/css", ".css")
mimetypes.add_type("text/javascript", ".js")
mimetypes.add_type("application/javascript", ".js")
